version: '3.7'

services:
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8070:8070"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - web

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: admin123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - web

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - web

  react-frontend:
    build:
      context: ./frontend
    labels:
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - web

  fastapi-backend:
    build:
      context: ./backend
    environment:
      DATABASE_URL: postgres://app:admin123@postgres:5432/app
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.routers.backend-docs.rule=PathPrefix(`/docs`)"
      - "traefik.http.services.backend-docs.loadbalancer.server.port=8000"
    depends_on:
      - postgres
    networks:
      - web

  proxy-manager:
    image: jc21/nginx-proxy-manager
    ports:
      - "8090:80"
      - "81:81"
      - "443:443"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ./nginx-proxy-manager/data:/data
      - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt
    networks:
      - web

networks:
  web:
    external: true

volumes:
  postgres_data:

